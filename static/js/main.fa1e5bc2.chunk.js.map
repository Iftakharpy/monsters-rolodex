{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchText","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAgBeA,MAbf,SAAcC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAG,UAAKL,EAAMG,QAAQG,KAAnB,eAEL,6BAAKN,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCGTC,G,MAVE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,W,MCLZ,SAASO,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAC/C,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,I,UCHKG,E,kDACnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,WAAY,IAJF,E,qDAQd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,oBAG/C,WAAU,IAAD,OACP,EAAiCE,KAAKR,MAA9BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,WACZQ,EAAmBjB,EAASkB,QAAO,SAACxB,GAAD,OACvCA,EAAQG,KAAKsB,cAAcC,SAASX,EAAWU,kBAEjD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAACU,EAAD,CACEC,YAAY,sBACZC,aAAc,SAACiB,GAAD,OAAO,EAAKN,SAAS,CAAEN,WAAYY,EAAEC,OAAOC,WAE5D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA3BKO,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fa1e5bc2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt={`${props.monster.name} monster.`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\nconst CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport default function SearchBox({ placeholder, handleChange }) {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n}\n","import React, { Component } from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n// import logo from './logo.svg';\nimport \"./App.css\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchText: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchText } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search for monsters\"\n          handleChange={(e) => this.setState({ searchText: e.target.value })}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}